// Generated by gencpp from file visual_slam/ObjectLocations.msg
// DO NOT EDIT!


#ifndef VISUAL_SLAM_MESSAGE_OBJECTLOCATIONS_H
#define VISUAL_SLAM_MESSAGE_OBJECTLOCATIONS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <visual_slam/ObjectLocation.h>

namespace visual_slam
{
template <class ContainerAllocator>
struct ObjectLocations_
{
  typedef ObjectLocations_<ContainerAllocator> Type;

  ObjectLocations_()
    : header()
    , obj_locations()  {
    }
  ObjectLocations_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , obj_locations(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::visual_slam::ObjectLocation_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::visual_slam::ObjectLocation_<ContainerAllocator> >::other >  _obj_locations_type;
  _obj_locations_type obj_locations;





  typedef boost::shared_ptr< ::visual_slam::ObjectLocations_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::visual_slam::ObjectLocations_<ContainerAllocator> const> ConstPtr;

}; // struct ObjectLocations_

typedef ::visual_slam::ObjectLocations_<std::allocator<void> > ObjectLocations;

typedef boost::shared_ptr< ::visual_slam::ObjectLocations > ObjectLocationsPtr;
typedef boost::shared_ptr< ::visual_slam::ObjectLocations const> ObjectLocationsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::visual_slam::ObjectLocations_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::visual_slam::ObjectLocations_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::visual_slam::ObjectLocations_<ContainerAllocator1> & lhs, const ::visual_slam::ObjectLocations_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.obj_locations == rhs.obj_locations;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::visual_slam::ObjectLocations_<ContainerAllocator1> & lhs, const ::visual_slam::ObjectLocations_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace visual_slam

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::visual_slam::ObjectLocations_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::visual_slam::ObjectLocations_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::visual_slam::ObjectLocations_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::visual_slam::ObjectLocations_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::visual_slam::ObjectLocations_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::visual_slam::ObjectLocations_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::visual_slam::ObjectLocations_<ContainerAllocator> >
{
  static const char* value()
  {
    return "533ce4e4caf32ab36f93c6ef43fe3db1";
  }

  static const char* value(const ::visual_slam::ObjectLocations_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x533ce4e4caf32ab3ULL;
  static const uint64_t static_value2 = 0x6f93c6ef43fe3db1ULL;
};

template<class ContainerAllocator>
struct DataType< ::visual_slam::ObjectLocations_<ContainerAllocator> >
{
  static const char* value()
  {
    return "visual_slam/ObjectLocations";
  }

  static const char* value(const ::visual_slam::ObjectLocations_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::visual_slam::ObjectLocations_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"ObjectLocation[] obj_locations\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: visual_slam/ObjectLocation\n"
"string object_class\n"
"float64 confidence\n"
"sensor_msgs/LaserScan scan_data\n"
"\n"
"================================================================================\n"
"MSG: sensor_msgs/LaserScan\n"
"# Single scan from a planar laser range-finder\n"
"#\n"
"# If you have another ranging device with different behavior (e.g. a sonar\n"
"# array), please find or create a different message, since applications\n"
"# will make fairly laser-specific assumptions about this data\n"
"\n"
"Header header            # timestamp in the header is the acquisition time of \n"
"                         # the first ray in the scan.\n"
"                         #\n"
"                         # in frame frame_id, angles are measured around \n"
"                         # the positive Z axis (counterclockwise, if Z is up)\n"
"                         # with zero angle being forward along the x axis\n"
"                         \n"
"float32 angle_min        # start angle of the scan [rad]\n"
"float32 angle_max        # end angle of the scan [rad]\n"
"float32 angle_increment  # angular distance between measurements [rad]\n"
"\n"
"float32 time_increment   # time between measurements [seconds] - if your scanner\n"
"                         # is moving, this will be used in interpolating position\n"
"                         # of 3d points\n"
"float32 scan_time        # time between scans [seconds]\n"
"\n"
"float32 range_min        # minimum range value [m]\n"
"float32 range_max        # maximum range value [m]\n"
"\n"
"float32[] ranges         # range data [m] (Note: values < range_min or > range_max should be discarded)\n"
"float32[] intensities    # intensity data [device-specific units].  If your\n"
"                         # device does not provide intensities, please leave\n"
"                         # the array empty.\n"
;
  }

  static const char* value(const ::visual_slam::ObjectLocations_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::visual_slam::ObjectLocations_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.obj_locations);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ObjectLocations_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::visual_slam::ObjectLocations_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::visual_slam::ObjectLocations_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "obj_locations[]" << std::endl;
    for (size_t i = 0; i < v.obj_locations.size(); ++i)
    {
      s << indent << "  obj_locations[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::visual_slam::ObjectLocation_<ContainerAllocator> >::stream(s, indent + "    ", v.obj_locations[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // VISUAL_SLAM_MESSAGE_OBJECTLOCATIONS_H
